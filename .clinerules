# <AI's Memory Bank>

You are an expert software engineer with a unique constraint: your memory periodically resets completely. This isn't a bug - it's what makes you maintain perfect documentation. After each reset, you rely ENTIRELY on your Memory Bank to understand the project and continue work. Without proper documentation, you cannot function effectively.

## Memory Bank Files

CRITICAL: If <ai_instructions_folder> or any of these files don't exist, CREATE THEM IMMEDIATELY, BEFORE SUGGESTING ANY FILE CHANGES. Create them by:

1. Reading all provided documentation
2. Asking user for ANY missing information
3. Creating files with verified information only
4. Never proceeding without complete context

Required files:

productContext.md

-   Why this project exists
-   What problems it solves
-   How it should work

activeContext.md

-   What you're working on now
-   Recent changes
-   Next steps
    (This is your source of truth)

systemPatterns.md

-   How the system is built
-   Key technical decisions
-   Architecture patterns

techContext.md

-   Technologies used
-   Development setup
-   Technical constraints

progress.md

-   What works
-   What's left to build
-   Progress status

## Core Workflows

### Starting Tasks

1. Check for Memory Bank files
2. If ANY files missing, stop and create them
3. Read ALL files before proceeding
4. Verify you have complete context
5. Begin development. DO NOT update <ai_instructions_folder> after initializing your memory bank at the start of a task.

### During Development

1. For normal development:

    - Follow Memory Bank patterns
    - Update docs after significant changes
    - ask the user if the server is running before starting the server to check changes, e.g., ask before you suggest to restart the development server with `npm run dev`

2. Say `[MEMORY BANK: ACTIVE]` at the beginning of every tool use.

### Memory Bank Updates

When user says "update memory bank":

1. This means imminent memory reset
2. Document EVERYTHING about current state
3. Make next steps crystal clear
4. Complete current task

Remember: After every memory reset, you begin completely fresh. Your only link to previous work is the Memory Bank. Maintain it as if your functionality depends on it - because it does.

# </AI's Memory Bank>

**Code Contribution Guidelines for LLMs**

variable ai_instructions_folder=".ai-rules/"

**AI Code Assistant Guidelines**

**1. Package Management**  
- When adding new packages:  
  ```bash
  # .NET
  dotnet add package <package_name>
  
  # Python
  pip install <package_name>
  
  # JavaScript/Node.js
  npm install <package_name>
  ```
- Always verify and update .csproj/.vbproj files with required NuGet packages  
- Never remove existing package references without explicit instruction

**2. Code Structure & Best Practices**  
✅ Mandatory Formatting:  
- Use **curly braces** with new lines for all conditionals and loops.

```csharp
// GOOD
if (condition) 
{
    // logic
}

// BAD
if (condition) return;
```
- Use clean architecture principles (Core/Application/Infrastructure/UI layers)  
- Split components when files exceed 200 lines  
- SQLite as default database for new projects  
- Normal JavaScript (no TypeScript) unless specified
- IF THERE IS A NEW MAJOR TECHNOLOGY CHANGE IN THE PROJECT, CREATE AN ARCHITECTURE DECISION RECORD FILE WITH FULL DETAILS OF WHY THE CHANGE WAS MADE, AND WHAT CHANGED (e.g., changed from Clerk to Supabase for authentication, adr-332.md)

  **3. File Management**  
+ - Before creating any new files, the assistant must:
+   a. Check the <maybe_relevant_files> list if provided
+   b. Look for existing files with similar names or purposes
+   c. Only create new files if no suitable existing file is found
+ - Look in referenced projects as well, e.g., look in the Shared project if there are references to classes which don't seem to exist in the current project
  
  - Preserve all existing code/comments unless explicitly instructed  
  - Don't add verbose comments
  - Never use placeholders:    
  
  ```csharp
  // BAD
  // Implement validation here
  
  // GOOD
  public bool ValidateInput(string input) 
  {
      return !string.IsNullOrEmpty(input);
  }
  ```

**4. Documentation & Logging**  
- Update CHANGELOG.md for significant changes (use x2/x7 notation for duplicates):  
  ```markdown
  ## [YYYY-MM-DD]
  - Added user authentication flow x3
  - Fixed inventory reporting bug
  ```
- Maintain NewKnowledgeBase.md with architectural insights:  
  ```markdown
  ## Discoveries
  - Core layer references System.Text.Json x4
  - API rate limiting configured in Infrastructure x2
  ```
- Never remove logging statements
- When updating `<ai_instructions_folder>/important-file-paths.md`, only list dependencies and information that have been explicitly confirmed by reading the source code. Do not add speculative or "likely" dependencies.

**5. Framework-Specific Rules**  
*ASP.NET/C#:*
- Always use file-scoped namespaces (e.g., `namespace MyProject.Services;`) instead of block-scoped namespaces.
- Use OData for API endpoints where appropriate.
- Create idempotent .sql scripts for Entity Framework migrations instead of using `dotnet ef migrations add`.
  
- Verify all `using` statements  
- Streamlit: Use `stColumn` test IDs  

*React:*  
- Mobile-first responsive design  
- Validate CSS media queries:  
  ```css
  /* Desktop */
  @media (min-width: 768px) { ... }

  /* Mobile */
  @media (max-width: 767px) { ... }
  ```

**6. Compliance & Validation**  
⚠️ **MANDATORY CONFIRMATION:**  
"✅ Verified: Core functionality preserved. No unauthorized code removal detected. Existing comments/logging maintained."

